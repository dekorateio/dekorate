dekorate.helm.name=myChart
# Produce tar file
dekorate.helm.createTarFile=true
# Dependencies
dekorate.helm.dependencies[0].name=dependency-name-a
dekorate.helm.dependencies[0].version=0.0.1
dekorate.helm.dependencies[0].repository=http://localhost:8080
dekorate.helm.dependencies[1].name=dependency-name-b
dekorate.helm.dependencies[1].alias=app
# Normal use case
dekorate.helm.values[0].property=helmOnKubernetesExample.name
dekorate.helm.values[0].paths=metadata.name,(kind == Ingress).spec.rules.http.paths.backend.service.name
# When json path is not found
dekorate.helm.values[1].property=helmOnKubernetesExample.not-found
dekorate.helm.values[1].paths=metadata.not-found
# Using values
dekorate.helm.values[2].property=helmOnKubernetesExample.vcs-url
dekorate.helm.values[2].paths=(kind == Deployment).spec.template.metadata.annotations.'app.dekorate.io/vcs-url'
dekorate.helm.values[2].value=Overridden
# Using values with profile
dekorate.helm.values[3].property=helmOnKubernetesExample.vcs-url
dekorate.helm.values[3].paths=(kind == Deployment).spec.template.metadata.annotations.'app.dekorate.io/vcs-url'
dekorate.helm.values[3].value=Only for DEV!
dekorate.helm.values[3].profile=dev
# Providing a different value for existing property (ingress.port)
dekorate.helm.values[4].property=helmOnKubernetesExample.host
dekorate.helm.values[4].paths=(kind == Ingress).spec.rules.host
dekorate.helm.values[4].value=my-test-host
dekorate.helm.values[4].profile=dev
dekorate.kubernetes.replicas=3
dekorate.kubernetes.expose=true
dekorate.kubernetes.host=my-host
